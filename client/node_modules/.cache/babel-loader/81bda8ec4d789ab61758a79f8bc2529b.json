{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCx2cguDF1JWVoWVOIm3sWMaZ8YWQkrOT8\",\n  authDomain: \"crwn-db-90a59.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-90a59.firebaseio.com\",\n  projectId: \"crwn-db-90a59\",\n  storageBucket: \"crwn-db-90a59.appspot.com\",\n  messagingSenderId: \"314856472559\",\n  appId: \"1:314856472559:web:2fccf2a05a830cdc01c01a\",\n  measurementId: \"G-RBWDRMCXNX\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  console.log(snapShot.data());\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName: \"test user\",\n        email: \"random@gmail.com\",\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/nileshjaat/Desktop/ecom/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","console","log","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,EAAZ;;AAEA,MAAI,CAACJ,QAAQ,CAACK,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBb,QAA/B;AACA,UAAMc,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMb,OAAO,CAACc,GAAR,CAAY;AAChBJ,QAAAA,WAAW,EAAE,WADG;AAEhBC,QAAAA,KAAK,EAAE,kBAFS;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGb;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOgB,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCQ,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOhB,OAAP;AACD,CAzBM;AA2BPb,QAAQ,CAAC8B,aAAT,CAAuB7B,MAAvB;AAEA,OAAO,MAAM8B,IAAI,GAAG/B,QAAQ,CAAC+B,IAAT,EAAb;AACP,OAAO,MAAMjB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMkB,QAAQ,GAAG,IAAIhC,QAAQ,CAAC+B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAehC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyCx2cguDF1JWVoWVOIm3sWMaZ8YWQkrOT8\",\n  authDomain: \"crwn-db-90a59.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-90a59.firebaseio.com\",\n  projectId: \"crwn-db-90a59\",\n  storageBucket: \"crwn-db-90a59.appspot.com\",\n  messagingSenderId: \"314856472559\",\n  appId: \"1:314856472559:web:2fccf2a05a830cdc01c01a\",\n  measurementId: \"G-RBWDRMCXNX\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n  console.log(snapShot.data());\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName: \"test user\",\n        email: \"random@gmail.com\",\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}